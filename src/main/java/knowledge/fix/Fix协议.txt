https://www.iteye.com/blog/rrsongzi-gmail-com-609990

Fix 协议可以分两大部分
会话层协议：会话层定义了数据通信相关的协议
业务层协议：业务层定义了金融活动相关的业务数据结构

Fix 的会话层设计时候充分考虑了
稳定性：稳定性指会话协议中定义了心跳消息来维护会话连接
安全性：安全性指协议从消息结构上支持数据加密
健壮性：出错重传指每个会话在两个端点各自维护一套消息序列号，防止消息丢失，漏发漏收，
       出现这种情况只要检查两边序列号的连续性就可以确定需要重传哪些消息。
高效性：

1. session 的通信各方维护一个 incomming 和 一个 outgoing 序列号。
Incomming 序列号用来检测序列号是否乱序或跨越。

2. 心跳在 initiator 发送 logon 消息时候设置在心跳域上， acceptor 和 initiator 的心跳间隔时间一致。

3. Fix 消息要按序列号从小到大顺序处理，若收发过程中出现丢包则有两种策略：
   3.1 重传序列号出错的包及以后所有收到得包；
   3.2 另一种是只重传出错的包；

4. Fix 协议没有定义应答消息，使用序列号不连贯来检测消息丢失，用 checksum ，签名或消息体长度来检测消息错误

5. Logon 阶段，客户端选择了了一个加密密钥，但服务器选择了不同的密钥放在返回的 logon 消息中，
   这时候客户端还得发一个 logon 消息应答服务器端，两个作用：
   1). 让服务器知道密钥变更获得了客户端的响应；
   2). 下面的消息开始要加密了

6. 在 logon 阶段完成后必须马上检查序列号，同步收发的消息，比如一端发送了消息但另一端没收到，这时候需要重传。
   可以通过对比 logon 消息中的序列号和通信一方的期望收到的消息序列号来检测消息漏收发。
7. 序列号最好每隔 24 小时重置一次，重置前要商量好哪一方来首先发送重置请求及发重置请求的时间。
   重置之前要一方首先发送 testrequest 消息，等待收 heartbeat 消息来确认连接是否正常，然后才发送 logon 消息，
   并把消息中的序列号重置域设为 Y ，并且序列号置为 1 ，接收方回复同样消息，重置成功；

8. Logout 之前需要发送 testrequest 消息强制心跳，检测消息序列号是否连续， logout 消息发送出去之后，
   需要等待一段时间接收 logout 回应消息，这段时间让双方来处理序列号不一致的问题，
   一旦序列号同步之后 logout 接收者马上发送回应的 Logout 消息， Logout 发起方收到回应后负责来关闭会话。

9. Fix4.4 中在 logon 消息中加入了 NextExceptedSeqNumb 域，用来表示本方期望对方发过来的下一个序列号，
   这样 logon 阶段完成后直接就是漏发消息的重发，不需要再发送 testrequest, heartbeat 和 ResendRequest消息了。

10. possResend 和 possDupFlag 区别就是前者使用了新序列号发送老的消息，可以通过检查消息中的域来确定是否已经收到过改消息，
    比如 order 的 ID 等；后者是用老的序列号重发消息，可以直接检查序列号来确定是否已经收到过该消息，若已收到过了就丢弃该消息。
    logon 消息中有两个字段 RAW Data Length 和 RAW data 用来存放认证需要的数据

----------------------------------------------------------------------------------------------------
https://zhuanlan.zhihu.com/p/73112022

一、定义
FIX协议是由国际FIX协会组织提供的一个开放式协议，目的是推动国际贸易电子化的进程，在各类参与者之间，
包括投资经理、经纪人，买方、卖方建立起实时的电子化通讯协议。FIX协议的目标是把各类证券金融业务需求流程格式化，
使之成为一个个可用计算机语言描述的功能流程，并在每个业务功能接口上统一交换格式，方便各个功能模块的连接。

二、协议工作原理

通信模型

1. Initiator ：发起者，建立通信连路，通过发送初始Logon消息发起会话的参与方。
2. Acceptor ：接收方 FIX会话的接收方。负责执行第一层次的认证和通过传输Logon消息的确认正式声明连接请求被接受。
3. 原则：先发起者为Initiator ，接受者为Acceptor 。
4. 标准模式以网关为Acceptor，客户端为Initiator做为常用模式。

Fix connection
FIX连接 由3部分组成：logon登录，message exchange消息传输，logout注销。

Fix session
FIX会话由一个或多个FIX Connection FIX连接组成。一个FIX会话可以有多次登录。

序列号
1. 所有的FIX消息都由一个唯一的序列号进行标示。序列号在每一个FIX会话开始时被初始化为1，并在整个会话期间递增。
   监控序列号可以使会话参与者识别和处理丢失的消息，当在一个FIX会话中重新连接时能够快速进行应用程序同步。
2. 每个会话将建立一组互不依赖的接受和发送序列。会话参与者将维护一个赋予发送消息的序列和一个监控接受消息的消息块间隙序列号。

心跳
1. 在消息交互期间，FIX应用程序将周期性产生Heartbeat心跳消息。该心跳消息可以监控通信链路状态及识别接收序列号间隙。
   发送Heartbeat的周期间隔由会话发起者使用在Logon消息中HeartBtInt域进行定义。
2. Heartbeat心跳消息的时间间隔应当在每一个消息发送后复位，即发送一个消息后，
   在间隔给定的时间内无其它消息发送则发送一个Heartbeat心跳消息。HeartBtInt的值应当被会话双方认同，
   由会话发起方定义并由会话接收者通过Logon消息进行确认。同一个HeartBtInt被会话双方——登录的发起者和登录的接受者共同使用。

数据完整校验
1. 消息数据内容的完整性可以参用两种方式来验证：消息长度和效验码检查。
2. 程序通过计算BodyLength域到CheckSum标记（“10=”）分界符的字符数，域BodyLength标示的消息长度进行比较来完成完整性效验。
3. ChekSum完整性检查，通过计算从域“8=” 中“8”开始，包括紧跟在CheckSum标记域的分界符每个字符的2进制和同CheckSum进行比较得到。
4. 一个FIX消息校验和通过计算到ChechSum域（但不包括）的消息的每个字节和得到。然后，校验和被转换为模256的数字用于传送和比较。
   校验和在所有加密操作之后被计算。

消息确认
1. FIX协议不支持单个消息的确认。采用的是监控消息时隙的方法来进行消息恢复和验证。
2. 普通的数据传送（无单个消息确认）通过消息序列间隙进行错误识别。每个消息由一个唯一的序列号进行标示。
   接收端应用程序负责监控接收消息序列号以识别消息间隙并产生重传请求。
3. 每个FIX参与方必须为FIX会话维护两个序列号，一个是接收序列号，一个是发送序列号，两者都在建立FIX会话开始时初始化为1。
   每个消息被赋予一个唯一的序列号值，并在消息发送后递增。此外，每个收到的消息都有一个唯一的序列号，接收序列号计数器在收到每个消息后将会被递增。
4. 当接收序列号与所希望得到的的正确序列号不必配时，必须采取纠错处理。

加密
1. 加密算法由连接双方共同协商。
2. 一个消息的任何一个域可以被加密并放在SecureData域中。然而，一些显示的标志域必须采用明文进行传输。
   为确保完整性，明文域可以在SecureData域中重复。
3. 当使用加密时，建议但不是必须，所有的消息体都进行加密。如果一个消息中的重复组数据中的部分数据要加密，这个重复组必须全部进行加密。
4. 预先协商好的加密算法在Logon消息中进行声明。

自定义域
1. FIX为给用户提供最大的灵活性，FIX协议允许用户自定义域。这些域在认同的参与者之间实现、应用，并且应注意避免冲突。
2. Tag数在5000 到9999保留用于用户自定义域。这些tag值用于企业联盟的信息交换。可以通过FIX网站进行注册。
3. 10000以上保留用于单一企业内部使用。不用注册。