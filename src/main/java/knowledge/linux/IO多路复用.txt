https://www.bilibili.com/video/BV1qJ411w7du/?spm_id_from=333.788.videocard.0

出现场景：设计一个高性能的网络服务器。可以供多个客户端同时连接并处理请求
1. 如果使用多线程（例如很多RPC框架），弊端是需要CPU上下文切换（入药处理操作句柄，尤其是客户端很多的时候）
2. 使用单线程处理大量客户端连接
   当服务器端在处理A请求时，如果B发送消息不会被丢弃，因为处理IO并不是CPU而是DMA控制器。（数据不丢失性提供了保障）
   在Linux中，一切都是文件，每一个网络连接再看内核中都是文件描述符的形式（FD），（有读FD,写FD,异常FD,等）
   while循环，遍历FD-A到FD-E,如有数据则读取并处理。（问题在哪里？判断有无数据是程序去判断的）

   1. select函数怎么做的？（使用bitmap,1024位，表示FD set）
      将用户态中的rset copy到内核态，判断哪一个有数据。如果没有数据，程序会阻塞。
      如果有数据，内核将FD置位，select函数返回，便利rset判断哪个FD被置位并处理。

      select的缺点  1. FD set 大小1024，有上限
                    2. FD set 不可重用，因为rset会置位
                    3. 用户态copy到内核态仍然有开销。
                    4. select 返回时需要重新遍历。On的复杂度。
   2. poll函数实现？ 传入FD数组，while循环遍历，（同样时阻塞函数）置位reevents字段并返回。
                    判断reevents并读取数据，最后恢复成0。（所以FDs可以重用）
                    1. 解决了1024大小的问题
                    2. 利用了结构体置位reevents，FDs可以重用

   3. epoll实现？  epoll FD类似一个白板。epoll control对FD进行控制。
                  例，add -> fd - events 加入白板（epfd）
                  epfd是在用户态和内核态共享的。（不在需要用户态内核态的copy开销）
                  如果有数据，置位->使用重排，将有数据的FD放在最前面的位置。并返回有数据的FD总数


